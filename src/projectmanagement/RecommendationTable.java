/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectmanagement;

import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mariam Eltorky
 */
public class RecommendationTable extends javax.swing.JFrame implements WindowListener{

    /**
     * Creates new form RecommendationTable
     */
    Connection conn=null;
   ResultSet rs=null;
   PreparedStatement pst=null;
   
    public RecommendationTable() {
        initComponents();
        conn=DBConnection.connectDB(); 
        this.setLocationRelativeTo(null);
        setIcon ();
    }

    public JButton getGeneratepdf() {
        return generatepdf;
    }

    public JButton getGenerateexcel() {
        return generateexcel;
    }

 
    public void setBack(JButton back) {
        this.back = back;
    }

    public JButton getBack() {
        return back;
    }

   
    public JButton getLogout() {
        return logout;
    }


    public JButton getShowPDF() {
        return showPDF;
    }

    public JTable getTable() {
        return table;
    }

   
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        generatepdf = new javax.swing.JButton();
        generateexcel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        showPDF = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(26, 49, 83));
        setPreferredSize(new java.awt.Dimension(1350, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        back.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        back.setForeground(new java.awt.Color(26, 49, 83));
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectmanagement/Back.png"))); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 100, 90));

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectmanagement/logout.png"))); // NOI18N
        getContentPane().add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 30, 100, 90));

        generatepdf.setBackground(new java.awt.Color(204, 204, 255));
        generatepdf.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        generatepdf.setForeground(new java.awt.Color(51, 0, 255));
        generatepdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectmanagement/pdf.png"))); // NOI18N
        generatepdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatepdfActionPerformed(evt);
            }
        });
        getContentPane().add(generatepdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 110, 100));

        generateexcel.setBackground(new java.awt.Color(204, 204, 255));
        generateexcel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        generateexcel.setForeground(new java.awt.Color(51, 0, 255));
        generateexcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectmanagement/excel.png"))); // NOI18N
        generateexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateexcelActionPerformed(evt);
            }
        });
        getContentPane().add(generateexcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 120, 100));

        table.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 1300, 550));

        showPDF.setBackground(new java.awt.Color(204, 204, 255));
        showPDF.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        showPDF.setForeground(new java.awt.Color(26, 49, 83));
        showPDF.setText("Show All");
        getContentPane().add(showPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, 210, 60));

        jLabel1.setBackground(new java.awt.Color(102, 153, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectmanagement/backendtotal.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1380, 740));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void generatepdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatepdfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generatepdfActionPerformed

    private void generateexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateexcelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateexcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecommendationTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecommendationTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecommendationTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecommendationTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecommendationTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton generateexcel;
    private javax.swing.JButton generatepdf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JButton showPDF;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public int wordcount(String string)  {  
          int count=0;  
      
            char ch[]= new char[string.length()];     
            for(int i=0;i<string.length();i++)  
            {  
                ch[i]= string.charAt(i);  
                if( ((i>0)&&(ch[i]!=' ')&&(ch[i-1]==' ')) || ((ch[0]!=' ')&&(i==0)) )  
                    count++;  
            }  
            return count;  
        }  
  /*  public ArrayList<DataClass> Titles () {
        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
       
             DataClass DC;
     
           DC=new DataClass("Recommended Risk Factors" , "Recommended Response Strategy", "Recommended Response Action");
           
     return DCS;                
    }
     public void ShowTitles() {
        ArrayList<DataClass> DCS=Titles();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }*/
    public ArrayList<DataClass> GroupA () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                               + " FROM Recommended d , Groups g WHERE g.GroupID='A' AND g.Recommended_ID=d.ID ; ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    public void ShowGroupA() {
        ArrayList<DataClass> DCS=GroupA();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    public ArrayList<DataClass> GroupB () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                               + " FROM Recommended d , Groups g WHERE g.GroupID='B' AND g.Recommended_ID=d.ID ; ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    public void ShowGroupB() {
        ArrayList<DataClass> DCS=GroupB();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    public ArrayList<DataClass> GroupC () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                               + " FROM Recommended d , Groups g WHERE g.GroupID='C' AND g.Recommended_ID=d.ID ; ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    public void ShowGroupC() {
        ArrayList<DataClass> DCS=GroupC();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    public ArrayList<DataClass> GroupD () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                               + " FROM Recommended d , Groups g WHERE g.GroupID='D' AND g.Recommended_ID=d.ID ; ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    public void ShowGroupD() {
        ArrayList<DataClass> DCS=GroupD();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
      
    }
    public ArrayList<DataClass> GroupOne () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                     + "FROM Recommended d , Groups g WHERE g.GroupID= '1'  AND g.Recommended_ID=d.ID ;  ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    
    public ArrayList<DataClass> GroupTwo () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                     + "FROM Recommended d , Groups g WHERE g.GroupID= '2'  AND g.Recommended_ID=d.ID ;  ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    
    public ArrayList<DataClass> GroupThree () {

        ArrayList<DataClass> DCS=new ArrayList<DataClass>();
         try{
             String sql="SELECT d.RecommendedRiskFactors,d.RecommendedResponseStrategy,d.RecommendedResponseAction "
                     + "FROM Recommended d , Groups g WHERE g.GroupID= '3'  AND g.Recommended_ID=d.ID ;  ";
             Statement st=conn.createStatement();
             rs=st.executeQuery(sql);
             DataClass DC;
             while(rs.next()) {
                 DC=new DataClass(rs.getString("RecommendedRiskFactors") , rs.getString("RecommendedResponseStrategy"), rs.getString("RecommendedResponseAction") );
                 DCS.add(DC);
             }
         }catch(Exception ex) {
           
          }
     return DCS;                
    }
    /******************* Start Group One *************************/
    
    public void ShowGroupAOne() {
        ArrayList<DataClass> DCS=GroupA();
        ArrayList<DataClass> DCS2=GroupOne();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    

   public void ShowGroupBOne() {
        ArrayList<DataClass> DCS=GroupB();
        ArrayList<DataClass> DCS2=GroupOne();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupCOne() {
        ArrayList<DataClass> DCS=GroupC();
        ArrayList<DataClass> DCS2=GroupOne();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupDOne() {
        ArrayList<DataClass> DCS=GroupD();
        ArrayList<DataClass> DCS2=GroupOne();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   /******************* End Group One *************************/
   
   
    /******************* Start Group One Two *************************/
    
    public void ShowGroupAOneTwo() {
        ArrayList<DataClass> DCS=GroupA();                 //49
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupTwo();            //+6
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
 
    public void ShowGroupBOneTwo() {
        ArrayList<DataClass> DCS=GroupB();                 //118
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupTwo();            //+6
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    public void ShowGroupCOneTwo() {
        ArrayList<DataClass> DCS=GroupC();                 //53
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupTwo();            //+6
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    public void ShowGroupDOneTwo() {
        ArrayList<DataClass> DCS=GroupD();                 //107
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupTwo();            //+6
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    /******************* End Group One Two *************************/
    
    
    
     /******************* Start Group One Three *************************/
    
   public void ShowGroupAOneThree() {
        ArrayList<DataClass> DCS=GroupA();                 //49
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
 
    public void ShowGroupBOneThree() {
        ArrayList<DataClass> DCS=GroupB();                 //118
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    public void ShowGroupCOneThree() {
        ArrayList<DataClass> DCS=GroupC();                 //53
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    public void ShowGroupDOneThree() {
        ArrayList<DataClass> DCS=GroupD();                 //107
        ArrayList<DataClass> DCS2=GroupOne();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    /******************* End Group One Three *************************/
    
    
    
    
    
    /******************* Start Group Two *************************/
    
    public void ShowGroupATwo() {
        ArrayList<DataClass> DCS=GroupA();
        ArrayList<DataClass> DCS2=GroupTwo();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    

   public void ShowGroupBTwo() {
        ArrayList<DataClass> DCS=GroupB();
        ArrayList<DataClass> DCS2=GroupTwo();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupCTwo() {
        ArrayList<DataClass> DCS=GroupC();
        ArrayList<DataClass> DCS2=GroupTwo();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupDTwo() {
        ArrayList<DataClass> DCS=GroupD();
        ArrayList<DataClass> DCS2=GroupTwo();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   /******************* End Group Two *************************/
   
   /******************* Start Group Two Three *************************/
   
   public void ShowGroupATwoThree() {
        ArrayList<DataClass> DCS=GroupA();                 //49
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
 
    public void ShowGroupBTwoThree() {
        ArrayList<DataClass> DCS=GroupB();                 //118
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    public void ShowGroupCTwoThree() {
        ArrayList<DataClass> DCS=GroupC();                 //53
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    public void ShowGroupDTwoThree() {
        ArrayList<DataClass> DCS=GroupD();                 //107
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
   
   
   /******************* End Group Two Three *************************/
    
    
    
    
    /******************* Start Group Three *************************/
    
    public void ShowGroupAThree() {
        ArrayList<DataClass> DCS=GroupA();
        ArrayList<DataClass> DCS2=GroupThree();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    

   public void ShowGroupBThree() {
        ArrayList<DataClass> DCS=GroupB();
        ArrayList<DataClass> DCS2=GroupThree();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupCThree() {
        ArrayList<DataClass> DCS=GroupC();
        ArrayList<DataClass> DCS2=GroupThree();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   
   public void ShowGroupDThree() {
        ArrayList<DataClass> DCS=GroupD();
        ArrayList<DataClass> DCS2=GroupThree();
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
   }
   /******************* End Group Three *************************/
   
   
   
   /******************* Start Group One Two Three *************************/
   
   public void ShowGroupAOneTwoThree() {
        ArrayList<DataClass> DCS=GroupA();                 //49
        ArrayList<DataClass> DCS1=GroupOne();
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS1.size();i++) {
            row[0]=DCS1.get(i).getRecommendedRiskFactors();
            row[1]=DCS1.get(i).getRecommendedResponseStrategy();
            row[2]=DCS1.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
        
    }
    
    
 
    public void ShowGroupBOneTwoThree() {
        ArrayList<DataClass> DCS=GroupB();                 //118
        ArrayList<DataClass> DCS1=GroupOne();
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS1.size();i++) {
            row[0]=DCS1.get(i).getRecommendedRiskFactors();
            row[1]=DCS1.get(i).getRecommendedResponseStrategy();
            row[2]=DCS1.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    
    
    public void ShowGroupCOneTwoThree() {
        ArrayList<DataClass> DCS=GroupC();                 //53
        ArrayList<DataClass> DCS1=GroupOne();
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS1.size();i++) {
            row[0]=DCS1.get(i).getRecommendedRiskFactors();
            row[1]=DCS1.get(i).getRecommendedResponseStrategy();
            row[2]=DCS1.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
    public void ShowGroupDOneTwoThree() {
        ArrayList<DataClass> DCS=GroupD();                 //107
        ArrayList<DataClass> DCS1=GroupOne();
        ArrayList<DataClass> DCS2=GroupTwo();            //+7
        ArrayList<DataClass> DCS3=GroupThree();            //+4
        DefaultTableModel model=(DefaultTableModel) table.getModel();
        Object[] row= new Object[3];
        for (int i=0;i<DCS.size();i++) {
            row[0]=DCS.get(i).getRecommendedRiskFactors();
            row[1]=DCS.get(i).getRecommendedResponseStrategy();
            row[2]=DCS.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS1.size();i++) {
            row[0]=DCS1.get(i).getRecommendedRiskFactors();
            row[1]=DCS1.get(i).getRecommendedResponseStrategy();
            row[2]=DCS1.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
        for (int i=0;i<DCS2.size();i++) {
            row[0]=DCS2.get(i).getRecommendedRiskFactors();
            row[1]=DCS2.get(i).getRecommendedResponseStrategy();
            row[2]=DCS2.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        for (int i=0;i<DCS3.size();i++) {
            row[0]=DCS3.get(i).getRecommendedRiskFactors();
            row[1]=DCS3.get(i).getRecommendedResponseStrategy();
            row[2]=DCS3.get(i).getRecommendedResponseAction();
            model.addRow(row);
        }
        
    }
   
   
   /******************* End Group One Two Three *************************/
    public void addController(ActionListener cont) {
    generatepdf.addActionListener(cont);
    showPDF.addActionListener(cont);
    back.addActionListener(cont);
    logout.addActionListener(cont);
    generateexcel.addActionListener(cont);
    
}
    
    public void setIcon () {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }

    @Override
    public void windowOpened(WindowEvent we) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent we) {
         try {
           String fileNameD="D:\\Recommendation.pdf";
            Files.deleteIfExists(Paths.get(fileNameD));
            String fileNameE="E:\\Recommendation.pdf";
            Files.deleteIfExists(Paths.get(fileNameE));
            String fileNameF="F:\\Recommendation.pdf";
            Files.deleteIfExists(Paths.get(fileNameF));
            String fileNameG="G:\\Recommendation.pdf";
            Files.deleteIfExists(Paths.get(fileNameG));
            String fileNameH="H:\\Recommendation.pdf";
            Files.deleteIfExists(Paths.get(fileNameH));
            System.out.println("Deleted From Recommendarion Table ING");
        } catch (IOException ex) {
            Logger.getLogger(NormalUserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void windowClosed(WindowEvent we) {
         System.out.println("Deleted From RecommengatioTable ED");
         File file=new File("D:\\Recommendation.pdf");
         if (file.exists()) {
         file.delete();
         }
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent we) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent we) {
     //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent we) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent we) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
}
